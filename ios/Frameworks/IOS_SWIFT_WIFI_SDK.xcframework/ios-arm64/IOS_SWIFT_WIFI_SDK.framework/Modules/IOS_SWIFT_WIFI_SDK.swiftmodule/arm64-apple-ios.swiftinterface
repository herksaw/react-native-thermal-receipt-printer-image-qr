// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IOS_SWIFT_WIFI_SDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import IOS_SWIFT_WIFI_SDK
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import zlib
@objc @_inheritsConvenienceInitializers public class GTSPL_WIFI : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public func openPort(IP: Swift.String, port: Swift.Int, callback: @escaping ((Swift.String) -> Swift.Void))
  public func closePort(callback: @escaping (Swift.String) -> Swift.Void)
  public func setup(width: Swift.Int, height: Swift.Int, speed: Swift.Int, density: Swift.Int, sensor: Swift.Int, sensorDistance: Swift.Int, sensorOffset: Swift.Int, callback: @escaping (Swift.String) -> Swift.Void)
  public func clearBuffer()
  public func printBarcode(x: Swift.Int, y: Swift.Int, type: Swift.String, height: Swift.Int, readable: Swift.Int, rotation: Swift.Int, narrow: Swift.Int, wide: Swift.Int, content: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func printQRCode(x: Swift.Int, y: Swift.Int, eccLevel: Swift.String, cellWidth: Swift.Int, rotation: Swift.Int, content: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func formFeed()
  public func noBackFeed()
  public func sendCommand(_ string: Swift.String)
  public func sendByteCmd(cmdData: Foundation.Data)
  public func printFont(x: Swift.Int, y: Swift.Int, fontName: Swift.String, rotation: Swift.Int, x_scale: Swift.Int, y_scale: Swift.Int, content: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func printLabel(set: Swift.Int, copy: Swift.Int)
  public func downloadPCX(filePath: Foundation.URL, fileName: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func downloadBMP(filePath: Foundation.URL, fileName: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func downloadTTF(filePath: Foundation.URL, fileName: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func getSdkVersion() -> Swift.String
  public func printerStatus(callback: @escaping (Swift.String) -> Swift.Void)
  public func setDirectionAndMirror(direction: Swift.Int, mirror: Swift.Int)
  public func setShift(shiftY: Swift.Int)
  public func printReverse(x_start: Swift.Int, y_start: Swift.Int, x_width: Swift.Int, y_height: Swift.Int)
  public func setOffset(offset: Swift.Double)
  public func setCutMode(mode: Swift.Int, piece: Swift.Int)
  public func setAfterPrintAction(mode: Swift.Int)
  public func genericDefault()
  public func sensorDefault()
  public func switchWifiFrequency(frequency: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func printBitmap(imageData: Foundation.Data, x: Swift.Int, y: Swift.Int, width: Swift.Int = 0, height: Swift.Int = 0, mode: Swift.Int, callback: @escaping (Swift.String) -> Swift.Void)
  @objc deinit
}
extension IOS_SWIFT_WIFI_SDK.GTSPL_WIFI {
  public func setRealTimeStatus(_ status: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func getRealTimeStatus(callback: @escaping (Swift.String) -> Swift.Void)
  public func getStatusNumber() -> Swift.String?
}
extension IOS_SWIFT_WIFI_SDK.GTSPL_WIFI {
  public func writeUHF(dataFormat: Swift.String, startBlockNo: Swift.Int, byteSize: Swift.Int, Gen2MemoryBank: Swift.String, dataString: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func EPCPWD_Action(action: Swift.String, password: Swift.String)
  public func TIDPWD_Action(action: Swift.String, password: Swift.String)
  public func USERPWD_Action(action: Swift.String, password: Swift.String)
  public func accessPWD_Action(action: Swift.String, password: Swift.String)
  public func killPWD_Action(action: Swift.String, password: Swift.String)
  public func setRFIDProcedure(tagType: Swift.Int, rw_position: Swift.Int, void_printout: Swift.Int, tryEncode_times: Swift.Int, error_handle: Swift.String, speed: Swift.Int, retry_times: Swift.Int, callback: @escaping (Swift.String) -> Swift.Void)
  public func setRFIDProcedure(tagType: Swift.Int, rw_position: Swift.Int, void_printout: Swift.Int, tryEncode_times: Swift.Int, error_handle: Swift.String, speed: Swift.Int, retry_times: Swift.Int, dpi: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func writeHF(dataFormat: Swift.String, startBlockNo: Swift.Int, byteSize: Swift.Int, dataString: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func printFontBlock(x: Swift.Int, y: Swift.Int, width: Swift.Int, height: Swift.Int, fontName: Swift.String, rotation: Swift.Int, x_scale: Swift.Int, y_scale: Swift.Int, space: Swift.Int, align: Swift.Int, content: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func readUHF(dataFormat: Swift.String, startBlockNo: Swift.Int, byteSize: Swift.Int, Gen2MemoryBank: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func query_UHF(dataFormat: Swift.String, PCReturnStatus: Swift.Int, CRCReturnStatus: Swift.Int, callback: @escaping (Swift.String) -> Swift.Void)
  public func rfid_calibration(callback: @escaping (Swift.String) -> Swift.Void)
  public func rfidSetupDefault()
}
extension IOS_SWIFT_WIFI_SDK.GTSPL_WIFI {
  public func set_GJB_Pwd_Action(passwordArea: Swift.String, newPassword: Swift.String, writePassword: Swift.String)
  public func writeGJB_UHF(dataFormat: Swift.String, startBlockNo: Swift.Int, byteSize: Swift.Int, GJBMemoryBank: Swift.String, dataString: Swift.String, writePassword: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func readGJB_UHF(dataFormat: Swift.String, startBlockNo: Swift.Int, byteSize: Swift.Int, GJBMemoryBank: Swift.String, readPassword: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func set_GJB_Status_UHF(GJBMemoryBank: Swift.String, action: Swift.String, statusPassword: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  public func killGJB_Tag_UHF(killPassword: Swift.String)
  public func getRFIDErrorCode() -> Swift.String
}
extension IOS_SWIFT_WIFI_SDK.GTSPL_WIFI : Foundation.StreamDelegate {
  @objc dynamic public func stream(_ aStream: Foundation.Stream, handle eventCode: Foundation.Stream.Event)
}
